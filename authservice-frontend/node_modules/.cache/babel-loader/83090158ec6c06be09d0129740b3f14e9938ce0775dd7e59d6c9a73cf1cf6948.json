{"ast":null,"code":"const API_URL = \"http://localhost:9090/auth\";\nexport const checkUserExists = async email => {\n  try {\n    const response = await fetch(`${API_URL}/check-user`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to check user existence\");\n    }\n    const data = await response.json();\n    return data.exists; // API should return { exists: true/false }\n  } catch (error) {\n    console.error(\"Error checking user:\", error);\n    return false; // Default to false in case of an error\n  }\n};\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_URL}/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error(\"Registration failed\");\n    }\n    return response.text(); // Returns response message as text\n  } catch (error) {\n    console.error(\"Error registering user:\", error);\n    return \"Registration failed\";\n  }\n};\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Login failed\");\n    }\n    return response.text(); // Returns JWT token as text\n  } catch (error) {\n    console.error(\"Error logging in:\", error);\n    return \"Login failed\";\n  }\n};","map":{"version":3,"names":["API_URL","checkUserExists","email","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","exists","error","console","registerUser","userData","text","loginUser","password"],"sources":["C:/Users/koko6/Downloads/projects/authservice/authservice/authservice-frontend/src/AuthService.js"],"sourcesContent":["const API_URL = \"http://localhost:9090/auth\";\r\n\r\nexport const checkUserExists = async (email) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/check-user`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ email }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Failed to check user existence\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.exists; // API should return { exists: true/false }\r\n    } catch (error) {\r\n        console.error(\"Error checking user:\", error);\r\n        return false; // Default to false in case of an error\r\n    }\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/register`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Registration failed\");\r\n        }\r\n\r\n        return response.text(); // Returns response message as text\r\n    } catch (error) {\r\n        console.error(\"Error registering user:\", error);\r\n        return \"Registration failed\";\r\n    }\r\n};\r\n\r\nexport const loginUser = async (email, password) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/login`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ email, password }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Login failed\");\r\n        }\r\n\r\n        return response.text(); // Returns JWT token as text\r\n    } catch (error) {\r\n        console.error(\"Error logging in:\", error);\r\n        return \"Login failed\";\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,4BAA4B;AAE5C,OAAO,MAAMC,eAAe,GAAG,MAAOC,KAAK,IAAK;EAC5C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,aAAa,EAAE;MAClDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAM,CAAC;IAClC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACrD;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,MAAM,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,KAAK,CAAC,CAAC;EAClB;AACJ,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,WAAW,EAAE;MAChDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,QAAQ;IACjC,CAAC,CAAC;IAEF,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IAC1C;IAEA,OAAOR,QAAQ,CAACgB,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,qBAAqB;EAChC;AACJ,CAAC;AAED,OAAO,MAAMK,SAAS,GAAG,MAAAA,CAAOlB,KAAK,EAAEmB,QAAQ,KAAK;EAChD,IAAI;IACA,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,QAAQ,EAAE;MAC7CK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,KAAK;QAAEmB;MAAS,CAAC;IAC5C,CAAC,CAAC;IAEF,IAAI,CAAClB,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IACnC;IAEA,OAAOR,QAAQ,CAACgB,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO,cAAc;EACzB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}